#+DATE: <2020-12-17 Thu 17:54>
#+TITLE: 第四章 变量、作用域与内存

#+BEGIN_QUOTE
本章内容：
- [ ] 通过变量使用原始值与引用值
- [ ] 理解执行上下文
- [ ] 理解垃圾回收
#+END_QUOTE

JavaScript 变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。

#+BEGIN_EXPORT html
<essay>
这样的变量很有意思，很强大，当然也有不少问题。
</essay>
#+END_EXPORT

** 原始值与引用值

ES 变量可以包含两种不同类型的数据：原始值（primitive value）和引用值（reference value）。在把一个值赋给变量时，JavaScript 引擎必须确定这个值是原始值还是引用值。

_原始值_ ，就是最简单的数据，包括： =Undefined、Null、Boolean、Number、String= 和 =Symbol= 。保存原始值的变量是按值（by value）访问的，因为我们操作的就是存储在变量中的实际值。

_引用值_ ，则是由多个值构成的对象，是保存在内存中对象。与其他语言不同，JavaScript 不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象时，实际操作的是对该对象的引用（reference）而非实际的对象本身。为此，保存引用值的变量是按引用（by reference）访问的。

*注：在很多语言中，字符串是使用对象表示的，因此被认为是引用类型。ES 打破了这个惯例。

*** 动态属性

原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。不过，在变量保存了这个值之后，可以对这个值做什么，则大有不同。对于引用值而言，可以随时添加、修改和删除其属性和方法。而原始值不能有属性，尽管尝试给原始值添加属性不会报错。

**注：只有引用值可以动态添加后面可以使用的属性。*

*** 复制值

除了存储方式不同，原始值和引用值在通过变量复制时也有不同。

在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。这两个变量可以独立使用，互不干扰。

#+BEGIN_EXPORT html
<img
src="/images/js-1.jpg"
width="200"
height=""
style=""
title=""
/>
#+END_EXPORT

#+BEGIN_EXPORT html
<img
src="/images/js-2.jpg"
width="540"
height=""
style="float: right; margin-left: 8px;"
title=""
/>
#+END_EXPORT

在把引用值从一个变量赋值给另一个变量时，存储在变量中的值也会被复制到新变量所在的位置。区别在于，这里复制的值实际上是一个指针，它指向存储在堆内存中的对象。操作完成后，两个变量实际上指向的同一个对象，因此一个对象上面的变化会在另一个对象上反映出来。

*** 传递参数

*ES 中所有函数的参数都是按值传递的。*

这意味着函数外的值会复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。

在按值传递参数时，值会被复制到一个局部变量（即一个命名参数，就是 =arguments= 对象的中的一个槽位）。在按引用传递参数时，值在内存中的置会被保存在一个局部变量，这意味着对本地变量的修改会反映到函数外部。

#+BEGIN_SRC js -n
  function addTen(num) {
      num += 10
      return num
  }

  let count = 20
  let result = addTen(count)
  console.log(count)              // → 20 没有变化
  console.log(result)             // → 30
#+END_SRC
